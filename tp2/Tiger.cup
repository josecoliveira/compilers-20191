package lexsyn;

import java_cup.runtime.*;

parser code {:
  public static void main(String args[]) throws Exception {
		System.out.println("----------------------");
		parser myParser = new parser(new Yylex(System.in));
		myParser.parse();
		System.out.print("Program accepted.");
	}
:}

/* Terminals (tokens returned by the scanner). */
terminal ARRAY;
terminal IF, THEN, ELSE;
terminal WHILE, FOR, TO, DO;
terminal LET, IN, END, OF, BREAK, NIL, FUNCTION, VAR, TYPE;
terminal COMMA, COLON, SEMICOLON;
terminal LPAREN, RPAREN;
terminal LBRACKET, RBRACKET;
terminal LBRACE, RBRACE;
terminal DOT;
terminal PLUS, MINUS, TIMES, DIV;
terminal EQCOMP, NEQCOMP, LTCOMP, LECOMP, GTCOMP, GECOMP;
terminal ANDBOOL, ORBOOL;
terminal ASSIGN;
terminal STRING, ID, NUM;
terminal UMINUS;

/* Non terminals */
non terminal            expr_list;
non terminal Integer    expr;      // used to store evaluated subexpressions

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS;

/* The grammar rules */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e);:}
            | expr:e SEMI                   {: System.out.println(e);:}
;
expr      ::= expr:e1 PLUS  expr:e2         {: System.out.println(e1);System.out.println(e2);:}
             | expr:e1 MINUS expr:e2        {: System.out.println(e1);System.out.println(e2);:}
             | expr:e1 TIMES expr:e2        {: System.out.println(e1);System.out.println(e2);:}
             | MINUS expr:e                 {: System.out.println(e);:}
  	     %prec UMINUS
       | LPAREN expr:e RPAREN	         {: System.out.println(e);:}
       | NUMBER:n	                     {: System.out.println(n);:}
             ;